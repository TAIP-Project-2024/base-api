import unittest
from unittest.mock import MagicMock

from api.services.layouts.Layout import Layout


# Concrete subclass of Layout for testing purposes
class TestLayout(Layout):
    def apply(self, graph, html_file):
        # A mock implementation for the abstract method
        pass


class TestLayoutClass(unittest.TestCase):

    def setUp(self):
        """ Set up the test case with a mock Network object. """
        # Create a mock Network object
        self.mock_network = MagicMock()
        self.mock_network.generate_html.return_value = "<html><head></head><body>Initial Content</body></html>"

        # Create a mock for the html attribute so that replace can be mocked
        self.mock_network.html = "<html><head></head><body>Initial Content</body></html>"  # Raw HTML string

        # Instantiate the Layout subclass
        self.layout = TestLayout()

    def test_load_interactions_adds_script(self):
        """ Test that load_interactions correctly appends the script to the HTML content """
        # Simulate the behavior of load_interactions
        self.layout.load_interactions(self.mock_network)

        # Check that the generated HTML contains the JavaScript code
        self.assertIn("<script type=\"text/javascript\">", self.mock_network.html)
        self.assertIn("network.on(\"hoverNode\", function (params) {", self.mock_network.html)
        self.assertIn("network.on(\"selectNode\", function (params) {", self.mock_network.html)
        self.assertIn("window.parent.postMessage(message, \"*\");", self.mock_network.html)

    def test_load_interactions_modifies_html(self):
        """ Test that load_interactions modifies the HTML content as expected """
        # Apply load_interactions and check if it modifies the HTML content
        initial_html = self.mock_network.html
        self.layout.load_interactions(self.mock_network)

        # Check if the HTML content has been updated with the script and other content
        modified_html = self.mock_network.html
        self.assertNotEqual(initial_html, modified_html)  # The HTML should be modified
        self.assertIn("</body>", modified_html)
        self.assertIn("<script type=\"text/javascript\">", modified_html)

    def test_load_interactions_with_network(self):
        """ Test that the HTML content is correctly generated by mock network """
        # Apply load_interactions and check if the HTML content is modified correctly
        initial_html = self.mock_network.html
        self.layout.load_interactions(self.mock_network)

        # Check if the content was modified correctly
        self.assertIn("<script type=\"text/javascript\">", self.mock_network.html)
        self.assertIn("network.on(\"hoverNode\", function (params) {", self.mock_network.html)
        self.assertIn("network.on(\"selectNode\", function (params) {", self.mock_network.html)

    def tearDown(self):
        """ Clean up after each test (not needed here but added for completeness). """
        pass


if __name__ == '__main__':
    unittest.main()
